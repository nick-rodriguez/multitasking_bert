# Example config for single task learning

multi_tasking_train.experiment_name = "Single task learning"

# Run Configuration
multi_tasking_train.device = "cuda"
multi_tasking_train.model_storage_directory = ""  # Path to save models during training
multi_tasking_train.ml_flow_directory = ""  # Path to save mlflow data and artifacts

# Training
multi_tasking_train.eval_on_dev = True  # Whether to evaluate on a development set
multi_tasking_train.transformer_weights = ""  # pretrained model weights
multi_tasking_train.evaluation_interval = 1  # Interval for evaluating the model on the test set
multi_tasking_train.checkpoint_interval = 1  # Interal for saving model
multi_tasking_train.num_epochs = 20  # Number of epoch to train for
multi_tasking_train.seed = 0  # random seed
multi_tasking_train.learning_rate = 5e-5
multi_tasking_train.repeat_in_epoch_sampling = False  # Setting to False downsamples the larger datasets
multi_tasking_train.use_pretrained_heads = True  # Use pretrained classifier layers. If none are found, a new head will be trained.
multi_tasking_train.write_predictions = True  # Whether to write model predictions

# Data Loading
multi_tasking_train.data_directory = ""  # Path to preprocessed data in PyTorch Dataset compatible format (see documentation)
multi_tasking_train.ablation_amount = 0.0  # You can set multiple values in train.py for data ablation
multi_tasking_train.shuffle = True  # Shuffles the test/dev datasets on eval. (True recommended)
multi_tasking_train.num_workers = 0

# Example of dataset-specific configuration using the HUNER dataset
get_huner_tasks.batch_size = 25
get_huner_tasks.huner_datasets = {
    'cellline': [
        # "cellfinder",
        "cll",
        "gellus",
        "jnlpba"
    ],
    'gene': [
        "bc2gm",
        "bioinfer",
        # "cellfinder",
        "deca",
        "fsu",
        "gpro",
        "iepa",
        "jnlpba",
        "miRNA",
        "osiris",
        "variome",
    ],
    'species': [
        # "cellfinder",
        "linneaus",
        "miRNA",
        "s800",
        "variome",
    ],
    'chemical': [
        # "biosemantics",
        "cdr",
        "cemp",
        "chebi",
        "chemdner",
        "scai_chemicals",
    ],
}
